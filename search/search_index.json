{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pycalrissian","text":"<p>pycalrissian is a Python client library for running Common Workflow Language (CWL) descriptions on Kubernetes using Calrissian.</p> <p>It provides simple objects and methods to:</p> <ul> <li>prepare a Kubernetes namespace ready to run Calrissian kubernetes jobs including:<ul> <li>roles</li> <li>role bindings</li> <li>image pull secret(s)</li> <li>persistent volume claim with RWX</li> </ul> </li> <li>create a Calrissian Kubernetes job in that namespace based on a CWL description and its parameters</li> <li>submit and monitor the job execution and retrieve usage, logs and outputs</li> </ul> <p>Refer to the installation documentation for installing pycalrissian.</p> <p>Refer to the getting started documentation to get started with pycalrissian.</p> <p>Refer to the API documentation to learn more about the pycalrissian API.</p>"},{"location":"gettingstarted/","title":"Creating a secret my-secret in the","text":"<p>Import the modules</p> In\u00a0[1]: Copied! <pre>from pycalrissian.context import CalrissianContext\nfrom pycalrissian.job import CalrissianJob\nfrom pycalrissian.execution import CalrissianExecution\nimport base64\nimport os\nimport yaml\nfrom kubernetes.client.models.v1_job import V1Job\n</pre> from pycalrissian.context import CalrissianContext from pycalrissian.job import CalrissianJob from pycalrissian.execution import CalrissianExecution import base64 import os import yaml from kubernetes.client.models.v1_job import V1Job  In\u00a0[3]: Copied! <pre>username = \"\"\npassword = \"\"\n\n\nauth = base64.b64encode(f\"{username}:{password}\".encode(\"utf-8\")).decode(\n    \"utf-8\"\n)\n\nsecret_config = {\n    \"auths\": {\n        \"registry.gitlab.com\": {\n            \"auth\": \"\"\n        },\n        \"https://index.docker.io/v1/\": {\n\t\t\t\"auth\": \"\"\n\t\t},\n\n    }\n}\n</pre> username = \"\" password = \"\"   auth = base64.b64encode(f\"{username}:{password}\".encode(\"utf-8\")).decode(     \"utf-8\" )  secret_config = {     \"auths\": {         \"registry.gitlab.com\": {             \"auth\": \"\"         },         \"https://index.docker.io/v1/\": { \t\t\t\"auth\": \"\" \t\t},      } } In\u00a0[4]: Copied! <pre>secret_config\n</pre> secret_config Out[4]: <pre>{'auths': {'registry.gitlab.com': {'auth': 'Z2l0bGFiK2RlcGxveS10b2tlbi0xODgxNzY4Oko1dHU4eXhkU3E0a19RMXpOOGhv'},\n  'https://index.docker.io/v1/': {'auth': 'ZmFicmljZWJyaXRvOmRja3JfcGF0X1E3NFRFZWhBZWVsSW9BWUFLamVUcmlRTldqZw=='}}}</pre> <p>Take away messages about image pull secrets</p> <ul> <li>they're created as a dictionary with the same structure as your <code>~/.docker/config</code> file</li> <li>you can use the username/password pair or the auth string</li> </ul> In\u00a0[\u00a0]: Copied! <pre>namespace_name = \"job-namespace-n\"\n\nsession = CalrissianContext(\n            namespace=namespace_name,\n            storage_class=\"openebs-kernel-nfs-scw\",\n            volume_size=\"10G\",\n            image_pull_secrets={\"imagePullSecrets\": secret_config},\n)\n</pre> namespace_name = \"job-namespace-n\"  session = CalrissianContext(             namespace=namespace_name,             storage_class=\"openebs-kernel-nfs-scw\",             volume_size=\"10G\",             image_pull_secrets={\"imagePullSecrets\": secret_config}, )  <p>Now trigger the <code>CalrissianContext</code> initialisation with:</p> In\u00a0[\u00a0]: Copied! <pre>session.initialise()\n</pre> session.initialise() <pre>2023-03-22 11:04:26.594 | INFO     | pycalrissian.context:initialise:65 - create namespace job-namespace-n\n2023-03-22 11:04:26.642 | INFO     | pycalrissian.context:create_namespace:281 - creating namespace job-namespace-n\n2023-03-22 11:04:31.757 | INFO     | pycalrissian.context:create_namespace:294 - namespace job-namespace-n created\n2023-03-22 11:04:31.760 | INFO     | pycalrissian.context:initialise:82 - create role pod-manager-role\n2023-03-22 11:04:36.912 | INFO     | pycalrissian.context:create_role:333 - role pod-manager-role created\n2023-03-22 11:04:36.914 | INFO     | pycalrissian.context:initialise:91 - create role binding for role pod-manager-role\n2023-03-22 11:04:42.069 | INFO     | pycalrissian.context:create_role_binding:373 - role binding pod-manager-default-binding created\n2023-03-22 11:04:42.070 | INFO     | pycalrissian.context:initialise:82 - create role log-reader-role\n2023-03-22 11:04:47.228 | INFO     | pycalrissian.context:create_role:333 - role log-reader-role created\n2023-03-22 11:04:47.230 | INFO     | pycalrissian.context:initialise:91 - create role binding for role log-reader-role\n2023-03-22 11:04:52.400 | INFO     | pycalrissian.context:create_role_binding:373 - role binding log-reader-default-binding created\n2023-03-22 11:04:52.402 | INFO     | pycalrissian.context:initialise:96 - create persistent volume claim 'calrissian-wdir' of 10G with storage class openebs-kernel-nfs-scw\n2023-03-22 11:04:57.562 | INFO     | pycalrissian.context:create_pvc:416 - pvc calrissian-wdir created\n2023-03-22 11:04:57.564 | INFO     | pycalrissian.context:initialise:110 - create secret container-rg\n2023-03-22 11:05:02.727 | INFO     | pycalrissian.context:create_image_pull_secret:510 - image pull secret container-rg created\n2023-03-22 11:05:02.730 | INFO     | pycalrissian.context:initialise:113 - patch service account\n</pre> In\u00a0[10]: Copied! <pre>with open(\"../tests/app-s2-composites.0.1.0.cwl\", \"r\") as stream:\n    cwl = yaml.safe_load(stream)\n\nparams = {\n    \"post_stac_item\": \"https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210723_0_L2A\", # noqa: E501\n    \"pre_stac_item\": \"https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210703_0_L2A\", # noqa: E501\n    \"aoi\": \"136.659,-35.96,136.923,-35.791\",\n}\n</pre> with open(\"../tests/app-s2-composites.0.1.0.cwl\", \"r\") as stream:     cwl = yaml.safe_load(stream)  params = {     \"post_stac_item\": \"https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210723_0_L2A\", # noqa: E501     \"pre_stac_item\": \"https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2B_53HPA_20210703_0_L2A\", # noqa: E501     \"aoi\": \"136.659,-35.96,136.923,-35.791\", } <p>Take away messages</p> <ul> <li>The CWL description is loaded into a Python dictionary</li> <li>The parameters are a Python dictionary</li> </ul> <p>So you can discover the CWL Workflow parameters with something like:</p> In\u00a0[11]: Copied! <pre>cwl[\"$graph\"][0][\"inputs\"]\n</pre> cwl[\"$graph\"][0][\"inputs\"] Out[11]: <pre>{'pre_stac_item': {'doc': 'Pre-event Sentinel-2 item', 'type': 'string'},\n 'post_stac_item': {'doc': 'Post-event Sentinel-2 item', 'type': 'string'},\n 'aoi': {'doc': 'area of interest as a bounding box', 'type': 'string?'},\n 'bands': {'type': 'string[]', 'default': ['B8A', 'B12', 'SCL']}}</pre> In\u00a0[12]: Copied! <pre>os.environ[\"CALRISSIAN_IMAGE\"] = \"docker.io/terradue/calrissian:0.12.0\"\njob = CalrissianJob(\n    cwl=cwl,\n    params=params,\n    runtime_context=session,\n    cwl_entry_point=\"dnbr\",\n    max_cores=2,\n    max_ram=\"4G\",\n    tool_logs=True,\n)\n</pre> os.environ[\"CALRISSIAN_IMAGE\"] = \"docker.io/terradue/calrissian:0.12.0\" job = CalrissianJob(     cwl=cwl,     params=params,     runtime_context=session,     cwl_entry_point=\"dnbr\",     max_cores=2,     max_ram=\"4G\",     tool_logs=True, ) <pre>2023-03-22 11:05:17.787 | INFO     | pycalrissian.job:__init__:68 - using default security context {'runAsUser': 0, 'runAsGroup': 0, 'fsGroup': 0}\n2023-03-22 11:05:17.788 | INFO     | pycalrissian.job:__init__:79 - job name: job-1679483117788287-73087b7b-3801-4ef0-9662-8f8b48f93c70\n2023-03-22 11:05:17.788 | INFO     | pycalrissian.job:__init__:80 - create CWL config map\n2023-03-22 11:05:22.973 | INFO     | pycalrissian.context:create_configmap:467 - config map cwl-workflow created\n2023-03-22 11:05:22.974 | INFO     | pycalrissian.job:__init__:82 - create processing parameters config map\n2023-03-22 11:05:28.127 | INFO     | pycalrissian.context:create_configmap:467 - config map params created\n</pre> <p>The <code>CalrissianJob</code> object is constructed with:</p> <ul> <li>a CWL dictionary</li> <li>a parameters dictionaty</li> <li>a runtime context, a CalrissianContext object</li> <li>the maximum number of cores the pods can use</li> <li>the maximum amount of RAM  the pods can use</li> </ul> <p>You may provide the optional <code>ttl_seconds_after_finished</code> parameter to define how many seconds after completion the job should be retained before being automatically deleted.</p> <p>If not specified, this value defaults to <code>None</code>, meaning the job will not be automatically cleaned up.</p> <p>The CalrissianJob can be serialized to a Kubernetes Job object:</p> In\u00a0[13]: Copied! <pre>isinstance(job.to_k8s_job(), V1Job)\n</pre> isinstance(job.to_k8s_job(), V1Job) <pre>2023-03-22 11:05:43.200 | INFO     | pycalrissian.job:_get_calrissian_container:417 - using Calrissian image: docker.io/terradue/calrissian:0.12.0\n</pre> Out[13]: <pre>True</pre> <p>Or to a Kubernetes Job manifest in YAML:</p> In\u00a0[14]: Copied! <pre>job.to_yaml(\"job.yml\")\n</pre> job.to_yaml(\"job.yml\") <pre>2023-03-22 11:05:44.398 | INFO     | pycalrissian.job:_get_calrissian_container:417 - using Calrissian image: docker.io/terradue/calrissian:0.12.0\n2023-03-22 11:05:44.407 | INFO     | pycalrissian.job:to_yaml:143 - job job-1679483117788287-73087b7b-3801-4ef0-9662-8f8b48f93c70 serialized to job.yml\n</pre> <p>Note The Calrissian pod image can be defined with the environment variable <code>CALRISSIAN_IMAGE</code></p> <p>At this stage, you could do <code>kubectl -n job-namespace apply -f job.yml</code> to submit the job on kubernetes</p> In\u00a0[15]: Copied! <pre>execution = CalrissianExecution(job=job, runtime_context=session)\n</pre> execution = CalrissianExecution(job=job, runtime_context=session) <p>Submit the job with:</p> In\u00a0[16]: Copied! <pre>execution.submit()\n</pre> execution.submit() <pre>2023-03-22 11:05:49.797 | INFO     | pycalrissian.execution:submit:32 - submit job job-1679483117788287-73087b7b-3801-4ef0-9662-8f8b48f93c70\n2023-03-22 11:05:49.800 | INFO     | pycalrissian.job:_get_calrissian_container:417 - using Calrissian image: docker.io/terradue/calrissian:0.12.0\n2023-03-22 11:05:49.869 | INFO     | pycalrissian.execution:submit:38 - job job-1679483117788287-73087b7b-3801-4ef0-9662-8f8b48f93c70 submitted\n</pre> <p>Monitor the execution with:</p> In\u00a0[17]: Copied! <pre>execution.monitor(interval=20)\n</pre> execution.monitor(interval=20) <pre>2023-03-22 11:05:56.327 | INFO     | pycalrissian.execution:monitor:210 - job job-1679483117788287-73087b7b-3801-4ef0-9662-8f8b48f93c70 is active\n2023-03-22 11:06:16.413 | INFO     | pycalrissian.execution:monitor:210 - job job-1679483117788287-73087b7b-3801-4ef0-9662-8f8b48f93c70 is active\n2023-03-22 11:06:36.482 | INFO     | pycalrissian.execution:monitor:210 - job job-1679483117788287-73087b7b-3801-4ef0-9662-8f8b48f93c70 is active\n2023-03-22 11:06:56.566 | INFO     | pycalrissian.execution:monitor:210 - job job-1679483117788287-73087b7b-3801-4ef0-9662-8f8b48f93c70 is active\n2023-03-22 11:07:16.643 | INFO     | pycalrissian.execution:monitor:210 - job job-1679483117788287-73087b7b-3801-4ef0-9662-8f8b48f93c70 is active\n2023-03-22 11:07:36.725 | INFO     | pycalrissian.execution:monitor:210 - job job-1679483117788287-73087b7b-3801-4ef0-9662-8f8b48f93c70 is active\n2023-03-22 11:07:56.812 | INFO     | pycalrissian.execution:monitor:210 - job job-1679483117788287-73087b7b-3801-4ef0-9662-8f8b48f93c70 is active\n2023-03-22 11:08:16.942 | INFO     | pycalrissian.execution:monitor:210 - job job-1679483117788287-73087b7b-3801-4ef0-9662-8f8b48f93c70 is active\n2023-03-22 11:08:37.152 | INFO     | pycalrissian.execution:monitor:239 - execution is complete\n2023-03-22 11:08:37.216 | INFO     | pycalrissian.execution:monitor:241 - the outcome is: success!\n</pre> <p>Get the execution log</p> In\u00a0[18]: Copied! <pre>log = execution.get_log()\nprint(log)\n</pre> log = execution.get_log() print(log) <pre>INFO calrissian 0.12.0 (cwltool 3.1.20230201224320)\nINFO Resolved '/workflow-input/workflow.cwl#dnbr' to 'file:///workflow-input/..2023_03_22_11_05_50.1680561479/workflow.cwl#dnbr'\nWARNING Workflow checker warning:\n../workflow-input/..2023_03_22_11_05_50.1680561479/workflow.cwl:9:7:  Source 'aoi' of type [\"null\",\n                                                                      \"string\"] may be incompatible\n../workflow-input/..2023_03_22_11_05_50.1680561479/workflow.cwl:51:9:   with sink 'aoi' of type\n                                                                        \"string\"\nINFO [workflow ] starting step node_nbr\nINFO [step node_nbr] start\nINFO [workflow node_nbr] starting step node_stac_2\nINFO [step node_stac_2] start\nINFO [step node_stac_2] start\nINFO [step node_stac_2] start\nINFO [step node_nbr] start\nINFO [workflow node_nbr_2] starting step node_stac_3\nINFO [step node_stac_3] start\nINFO [step node_stac_3] start\nINFO [step node_stac_3] start\nINFO [workflow ] start\nINFO [workflow node_nbr] start\nINFO [workflow node_nbr_2] start\nINFO [step node_stac_2] completed success\nINFO [workflow node_nbr] starting step node_subset\nINFO [step node_subset] start\nINFO [step node_subset] start\nINFO [step node_subset] start\nINFO [step node_stac_3] completed success\nINFO [workflow node_nbr_2] starting step node_subset_2\nINFO [step node_subset_2] start\nINFO [step node_subset_2] start\nINFO [step node_subset_2] start\nINFO [step node_subset] completed success\nINFO [workflow node_nbr] starting step node_nbr_2\nINFO [step node_nbr_2] start\nINFO [step node_subset_2] completed success\nINFO [workflow node_nbr_2] starting step node_nbr_3\nINFO [step node_nbr_3] start\nINFO [step node_nbr_2] completed success\nINFO [workflow node_nbr] starting step node_cog_2\nINFO [step node_cog_2] start\nINFO [step node_nbr_3] completed success\nINFO [workflow node_nbr_2] starting step node_cog_3\nINFO [step node_cog_3] start\nINFO [step node_cog_2] completed success\nINFO [workflow node_nbr] completed success\nINFO [step node_cog_3] completed success\nINFO [workflow node_nbr_2] completed success\nINFO [step node_nbr] completed success\nINFO [workflow ] starting step node_dnbr\nINFO [step node_dnbr] start\nINFO [step node_dnbr] completed success\nINFO [workflow ] starting step node_cog\nINFO [step node_cog] start\nINFO [step node_cog] completed success\nINFO [workflow ] starting step node_stac\nINFO [step node_stac] start\nINFO [step node_stac] completed success\nINFO [workflow ] completed success\nINFO Final process status is success\n{\n    \"stac\": {\n        \"location\": \"file:///calrissian/qk45d6lp\",\n        \"basename\": \"qk45d6lp\",\n        \"class\": \"Directory\",\n        \"listing\": [\n            {\n                \"class\": \"File\",\n                \"location\": \"file:///calrissian/qk45d6lp/dnbr-item.json\",\n                \"basename\": \"dnbr-item.json\",\n                \"checksum\": \"sha1$1c0a635ad501c599ab258019d05c7b276515c565\",\n                \"size\": 818,\n                \"path\": \"/calrissian/qk45d6lp/dnbr-item.json\"\n            },\n            {\n                \"class\": \"File\",\n                \"location\": \"file:///calrissian/qk45d6lp/catalog.json\",\n                \"basename\": \"catalog.json\",\n                \"checksum\": \"sha1$a5d1d9821e889aa125778e4f2e14a788ff1512ce\",\n                \"size\": 225,\n                \"path\": \"/calrissian/qk45d6lp/catalog.json\"\n            },\n            {\n                \"class\": \"File\",\n                \"location\": \"file:///calrissian/qk45d6lp/dnbr.tif\",\n                \"basename\": \"dnbr.tif\",\n                \"checksum\": \"sha1$87a3dfee0d055453dad525e8edd8a216121d808c\",\n                \"size\": 1402218,\n                \"path\": \"/calrissian/qk45d6lp/dnbr.tif\"\n            }\n        ],\n        \"path\": \"/calrissian/qk45d6lp\"\n    }\n}\n</pre> <p>Get the usage report</p> In\u00a0[19]: Copied! <pre>usage = execution.get_usage_report()\nusage\n</pre> usage = execution.get_usage_report() usage <pre>copy /calrissian/report.json to .\nSTDERR: tar: removing leading '/' from member names\n\n</pre> Out[19]: <pre>{'cores_allowed': 2.0,\n 'ram_mb_allowed': 4000.0,\n 'children': [{'cpus': 1.0,\n   'ram_megabytes': 268.435456,\n   'disk_megabytes': 0.0,\n   'exit_code': 0,\n   'name': 'node_stac',\n   'start_time': '2023-03-22T11:06:52+00:00',\n   'finish_time': '2023-03-22T11:06:52+00:00',\n   'elapsed_hours': None,\n   'elapsed_seconds': 0.0,\n   'ram_megabyte_hours': None,\n   'cpu_hours': None},\n  {'cpus': 1.0,\n   'ram_megabytes': 268.435456,\n   'disk_megabytes': 0.0,\n   'exit_code': 0,\n   'name': 'node_stac_2',\n   'start_time': '2023-03-22T11:06:53+00:00',\n   'finish_time': '2023-03-22T11:06:53+00:00',\n   'elapsed_hours': None,\n   'elapsed_seconds': 0.0,\n   'ram_megabyte_hours': None,\n   'cpu_hours': None},\n  {'cpus': 1.0,\n   'ram_megabytes': 268.435456,\n   'disk_megabytes': 0.0,\n   'exit_code': 0,\n   'name': 'node_stac_3',\n   'start_time': '2023-03-22T11:06:55+00:00',\n   'finish_time': '2023-03-22T11:06:55+00:00',\n   'elapsed_hours': None,\n   'elapsed_seconds': 0.0,\n   'ram_megabyte_hours': None,\n   'cpu_hours': None},\n  {'cpus': 1.0,\n   'ram_megabytes': 268.435456,\n   'disk_megabytes': 0.0,\n   'exit_code': 0,\n   'name': 'node_stac_4',\n   'start_time': '2023-03-22T11:06:56+00:00',\n   'finish_time': '2023-03-22T11:06:56+00:00',\n   'elapsed_hours': None,\n   'elapsed_seconds': 0.0,\n   'ram_megabyte_hours': None,\n   'cpu_hours': None},\n  {'cpus': 1.0,\n   'ram_megabytes': 268.435456,\n   'disk_megabytes': 0.0,\n   'exit_code': 0,\n   'name': 'node_stac_6',\n   'start_time': '2023-03-22T11:07:01+00:00',\n   'finish_time': '2023-03-22T11:07:02+00:00',\n   'elapsed_hours': 0.0002777777777777778,\n   'elapsed_seconds': 1.0,\n   'ram_megabyte_hours': 0.07456540444444444,\n   'cpu_hours': 0.0002777777777777778},\n  {'cpus': 1.0,\n   'ram_megabytes': 268.435456,\n   'disk_megabytes': 0.0,\n   'exit_code': 0,\n   'name': 'node_stac_5',\n   'start_time': '2023-03-22T11:07:02+00:00',\n   'finish_time': '2023-03-22T11:07:03+00:00',\n   'elapsed_hours': 0.0002777777777777778,\n   'elapsed_seconds': 1.0,\n   'ram_megabyte_hours': 0.07456540444444444,\n   'cpu_hours': 0.0002777777777777778},\n  {'cpus': 1.0,\n   'ram_megabytes': 268.435456,\n   'disk_megabytes': 2.256036,\n   'exit_code': 0,\n   'name': 'node_subset',\n   'start_time': '2023-03-22T11:07:05+00:00',\n   'finish_time': '2023-03-22T11:07:14+00:00',\n   'elapsed_hours': 0.0025,\n   'elapsed_seconds': 9.0,\n   'ram_megabyte_hours': 0.67108864,\n   'cpu_hours': 0.0025},\n  {'cpus': 1.0,\n   'ram_megabytes': 268.435456,\n   'disk_megabytes': 2.256036,\n   'exit_code': 0,\n   'name': 'node_subset_2',\n   'start_time': '2023-03-22T11:07:17+00:00',\n   'finish_time': '2023-03-22T11:07:26+00:00',\n   'elapsed_hours': 0.0025,\n   'elapsed_seconds': 9.0,\n   'ram_megabyte_hours': 0.67108864,\n   'cpu_hours': 0.0025},\n  {'cpus': 1.0,\n   'ram_megabytes': 268.435456,\n   'disk_megabytes': 1.128247,\n   'exit_code': 0,\n   'name': 'node_subset_3',\n   'start_time': '2023-03-22T11:07:18+00:00',\n   'finish_time': '2023-03-22T11:07:26+00:00',\n   'elapsed_hours': 0.0022222222222222222,\n   'elapsed_seconds': 8.0,\n   'ram_megabyte_hours': 0.5965232355555555,\n   'cpu_hours': 0.0022222222222222222},\n  {'cpus': 1.0,\n   'ram_megabytes': 268.435456,\n   'disk_megabytes': 2.256036,\n   'exit_code': 0,\n   'name': 'node_subset_4',\n   'start_time': '2023-03-22T11:07:29+00:00',\n   'finish_time': '2023-03-22T11:07:42+00:00',\n   'elapsed_hours': 0.003611111111111111,\n   'elapsed_seconds': 13.0,\n   'ram_megabyte_hours': 0.9693502577777777,\n   'cpu_hours': 0.003611111111111111},\n  {'cpus': 1.0,\n   'ram_megabytes': 268.435456,\n   'disk_megabytes': 1.128247,\n   'exit_code': 0,\n   'name': 'node_subset_6',\n   'start_time': '2023-03-22T11:07:45+00:00',\n   'finish_time': '2023-03-22T11:07:53+00:00',\n   'elapsed_hours': 0.0022222222222222222,\n   'elapsed_seconds': 8.0,\n   'ram_megabyte_hours': 0.5965232355555555,\n   'cpu_hours': 0.0022222222222222222},\n  {'cpus': 1.0,\n   'ram_megabytes': 268.435456,\n   'disk_megabytes': 2.256036,\n   'exit_code': 0,\n   'name': 'node_subset_5',\n   'start_time': '2023-03-22T11:07:46+00:00',\n   'finish_time': '2023-03-22T11:07:55+00:00',\n   'elapsed_hours': 0.0025,\n   'elapsed_seconds': 9.0,\n   'ram_megabyte_hours': 0.67108864,\n   'cpu_hours': 0.0025},\n  {'cpus': 1.0,\n   'ram_megabytes': 268.435456,\n   'disk_megabytes': 4.515438,\n   'exit_code': 0,\n   'name': 'node_nbr',\n   'start_time': '2023-03-22T11:07:57+00:00',\n   'finish_time': '2023-03-22T11:07:57+00:00',\n   'elapsed_hours': None,\n   'elapsed_seconds': 0.0,\n   'ram_megabyte_hours': None,\n   'cpu_hours': None},\n  {'cpus': 1.0,\n   'ram_megabytes': 268.435456,\n   'disk_megabytes': 4.515438,\n   'exit_code': 0,\n   'name': 'node_nbr_2',\n   'start_time': '2023-03-22T11:08:00+00:00',\n   'finish_time': '2023-03-22T11:08:00+00:00',\n   'elapsed_hours': None,\n   'elapsed_seconds': 0.0,\n   'ram_megabyte_hours': None,\n   'cpu_hours': None},\n  {'cpus': 2.0,\n   'ram_megabytes': 2097.152,\n   'disk_megabytes': 1.829194,\n   'exit_code': 0,\n   'name': 'node_cog',\n   'start_time': '2023-03-22T11:08:03+00:00',\n   'finish_time': '2023-03-22T11:08:03+00:00',\n   'elapsed_hours': None,\n   'elapsed_seconds': 0.0,\n   'ram_megabyte_hours': None,\n   'cpu_hours': None},\n  {'cpus': 2.0,\n   'ram_megabytes': 2097.152,\n   'disk_megabytes': 3.947077,\n   'exit_code': 0,\n   'name': 'node_cog_2',\n   'start_time': '2023-03-22T11:08:06+00:00',\n   'finish_time': '2023-03-22T11:08:06+00:00',\n   'elapsed_hours': None,\n   'elapsed_seconds': 0.0,\n   'ram_megabyte_hours': None,\n   'cpu_hours': None},\n  {'cpus': 1.0,\n   'ram_megabytes': 268.435456,\n   'disk_megabytes': 4.515438,\n   'exit_code': 0,\n   'name': 'node_dnbr',\n   'start_time': '2023-03-22T11:08:09+00:00',\n   'finish_time': '2023-03-22T11:08:09+00:00',\n   'elapsed_hours': None,\n   'elapsed_seconds': 0.0,\n   'ram_megabyte_hours': None,\n   'cpu_hours': None},\n  {'cpus': 2.0,\n   'ram_megabytes': 2097.152,\n   'disk_megabytes': 1.402218,\n   'exit_code': 0,\n   'name': 'node_cog_3',\n   'start_time': '2023-03-22T11:08:12+00:00',\n   'finish_time': '2023-03-22T11:08:12+00:00',\n   'elapsed_hours': None,\n   'elapsed_seconds': 0.0,\n   'ram_megabyte_hours': None,\n   'cpu_hours': None},\n  {'cpus': 1.0,\n   'ram_megabytes': 268.435456,\n   'disk_megabytes': 0.0,\n   'exit_code': 0,\n   'name': 'node_stac_7',\n   'start_time': '2023-03-22T11:08:14+00:00',\n   'finish_time': '2023-03-22T11:08:15+00:00',\n   'elapsed_hours': 0.0002777777777777778,\n   'elapsed_seconds': 1.0,\n   'ram_megabyte_hours': 0.07456540444444444,\n   'cpu_hours': 0.0002777777777777778}],\n 'start_time': '2023-03-22T11:06:52+00:00',\n 'finish_time': '2023-03-22T11:08:15+00:00',\n 'elapsed_hours': 0.023055555555555555,\n 'elapsed_seconds': 83.0,\n 'total_cpu_hours': 0.016388888888888887,\n 'total_ram_megabyte_hours': 4.399358862222222,\n 'total_disk_megabytes': 32.005441,\n 'total_tasks': 19,\n 'max_parallel_cpus': 2.0,\n 'max_parallel_ram_megabytes': 536.870912,\n 'max_parallel_tasks': 2}</pre> <p>Get the execution output</p> In\u00a0[20]: Copied! <pre>output = execution.get_output()\noutput\n</pre> output = execution.get_output() output <pre>copy /calrissian/output.json to .\nSTDERR: tar: removing leading '/' from member names\n\n</pre> Out[20]: <pre>{'stac': {'location': 'file:///calrissian/qk45d6lp',\n  'basename': 'qk45d6lp',\n  'class': 'Directory',\n  'listing': [{'class': 'File',\n    'location': 'file:///calrissian/qk45d6lp/dnbr-item.json',\n    'basename': 'dnbr-item.json',\n    'checksum': 'sha1$1c0a635ad501c599ab258019d05c7b276515c565',\n    'size': 818,\n    'path': '/calrissian/qk45d6lp/dnbr-item.json'},\n   {'class': 'File',\n    'location': 'file:///calrissian/qk45d6lp/catalog.json',\n    'basename': 'catalog.json',\n    'checksum': 'sha1$a5d1d9821e889aa125778e4f2e14a788ff1512ce',\n    'size': 225,\n    'path': '/calrissian/qk45d6lp/catalog.json'},\n   {'class': 'File',\n    'location': 'file:///calrissian/qk45d6lp/dnbr.tif',\n    'basename': 'dnbr.tif',\n    'checksum': 'sha1$87a3dfee0d055453dad525e8edd8a216121d808c',\n    'size': 1402218,\n    'path': '/calrissian/qk45d6lp/dnbr.tif'}],\n  'path': '/calrissian/qk45d6lp'}}</pre> <p>Get a few details about the execution</p> In\u00a0[21]: Copied! <pre>print(execution.get_start_time())\nprint(execution.get_completion_time())\n</pre> print(execution.get_start_time()) print(execution.get_completion_time()) <pre>2023-03-22 11:05:49+00:00\n2023-03-22 11:08:20+00:00\n</pre> In\u00a0[22]: Copied! <pre>print(f\"complete {execution.is_complete()}\")\nprint(f\"succeeded {execution.is_succeeded()}\")\n</pre> print(f\"complete {execution.is_complete()}\") print(f\"succeeded {execution.is_succeeded()}\") <pre>complete True\nsucceeded True\n</pre> In\u00a0[23]: Copied! <pre>execution.get_tool_logs()\n</pre> execution.get_tool_logs() <pre>copy /calrissian/report.json to .\nSTDERR: tar: removing leading '/' from member names\n\ncopy /calrissian/node_stac.log to .\nSTDERR: tar: removing leading '/' from member names\n\ncopy /calrissian/node_stac_2.log to .\nSTDERR: tar: removing leading '/' from member names\n\ncopy /calrissian/node_stac_3.log to .\nSTDERR: tar: removing leading '/' from member names\n\ncopy /calrissian/node_stac_4.log to .\nSTDERR: tar: removing leading '/' from member names\n\ncopy /calrissian/node_stac_6.log to .\nSTDERR: tar: removing leading '/' from member names\n\ncopy /calrissian/node_stac_5.log to .\nSTDERR: tar: removing leading '/' from member names\n\ncopy /calrissian/node_subset.log to .\nSTDERR: tar: removing leading '/' from member names\n\ncopy /calrissian/node_subset_2.log to .\nSTDERR: tar: removing leading '/' from member names\n\ncopy /calrissian/node_subset_3.log to .\nSTDERR: tar: removing leading '/' from member names\n\ncopy /calrissian/node_subset_4.log to .\nSTDERR: tar: removing leading '/' from member names\n\ncopy /calrissian/node_subset_6.log to .\nSTDERR: tar: removing leading '/' from member names\n\ncopy /calrissian/node_subset_5.log to .\nSTDERR: tar: removing leading '/' from member names\n\ncopy /calrissian/node_nbr.log to .\nSTDERR: tar: removing leading '/' from member names\n\ncopy /calrissian/node_nbr_2.log to .\nSTDERR: tar: removing leading '/' from member names\n\ncopy /calrissian/node_cog.log to .\nSTDERR: tar: removing leading '/' from member names\n\ncopy /calrissian/node_cog_2.log to .\nSTDERR: tar: removing leading '/' from member names\n\ncopy /calrissian/node_dnbr.log to .\nSTDERR: tar: removing leading '/' from member names\n\ncopy /calrissian/node_cog_3.log to .\nSTDERR: tar: removing leading '/' from member names\n\ncopy /calrissian/node_stac_7.log to .\nSTDERR: tar: removing leading '/' from member names\n\n</pre> Out[23]: <pre>['./node_stac.log',\n './node_stac_2.log',\n './node_stac_3.log',\n './node_stac_4.log',\n './node_stac_6.log',\n './node_stac_5.log',\n './node_subset.log',\n './node_subset_2.log',\n './node_subset_3.log',\n './node_subset_4.log',\n './node_subset_6.log',\n './node_subset_5.log',\n './node_nbr.log',\n './node_nbr_2.log',\n './node_cog.log',\n './node_cog_2.log',\n './node_dnbr.log',\n './node_cog_3.log',\n './node_stac_7.log']</pre> <p>Delete the Kubernetes namespace with:</p> In\u00a0[17]: Copied! <pre>session.dispose()\n</pre> session.dispose() <pre>2023-03-22 11:03:48.238 | INFO     | pycalrissian.context:dispose:121 - delete pod job-167948062876755-9399351e-e736-47f6-830d-89f9432b6fd4-h6brf\n2023-03-22 11:03:48.313 | INFO     | pycalrissian.context:dispose:121 - delete pod job-1679481953421835-58349bec-3178-45b6-827e-37ee74804919-44xdc\n2023-03-22 11:03:48.380 | INFO     | pycalrissian.context:dispose:121 - delete pod job-1679482405334652-5e620474-376e-413f-99ed-f40ca19ba08a-ftg9w\n2023-03-22 11:03:48.478 | INFO     | pycalrissian.context:dispose:121 - delete pod job-1679482833004388-941219c5-9755-46ce-9ebf-917dfda774a4-4fnd9\n2023-03-22 11:03:48.810 | INFO     | pycalrissian.context:dispose:121 - delete pod job-1679482833004388-941219c5-9755-46ce-9ebf-917dfda774a4-5kfdw\n2023-03-22 11:03:49.228 | INFO     | pycalrissian.context:dispose:121 - delete pod job-1679482833004388-941219c5-9755-46ce-9ebf-917dfda774a4-x889h\n2023-03-22 11:03:49.323 | INFO     | pycalrissian.context:dispose:124 - dispose namespace job-namespace\n2023-03-22 11:03:49.379 | INFO     | pycalrissian.context:dispose:132 - namespace job-namespace deleted\n</pre> Out[17]: <pre>{'api_version': 'v1',\n 'code': None,\n 'details': None,\n 'kind': 'Namespace',\n 'message': None,\n 'metadata': {'_continue': None,\n              'remaining_item_count': None,\n              'resource_version': '18983565861',\n              'self_link': None},\n 'reason': None,\n 'status': \"{'phase': 'Terminating'}\"}</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"gettingstarted/#create-the-image-pull-secrets","title":"Create the image pull secrets\u00b6","text":"<p>There's one for docker.hub and one for Gitlab container registry as the CWL description to run refers container images published on those two container registries</p>"},{"location":"gettingstarted/#create-the-calrissiancontext","title":"Create the CalrissianContext\u00b6","text":"<p>The CalrissianContext creates a kubernetes namespace on the cluster.</p> <p>Note: our kubernetes cluster uses the <code>longhorn</code> RWX storage class, adapt it to your cluster configuration</p>"},{"location":"gettingstarted/#using-existing-secrets","title":"Using existing secrets\u00b6","text":"<p>In addition to the <code>imagePullSecrets</code>, you can also specify an <code>additionalImagePullSecrets</code> key in the dictionary.</p> <p>This <code>additionalImagePullSecrets</code> is an array of secrets defined in the same namespace where the ZOO-Project-DRU Helm chart is deployed.</p> <p>Example:</p> <p>From the command line, you can create secret in any namespace.</p> <pre># Creating a secret my-secret in the \nkubectl create secret docker-registry my-secret \\\n  --docker-email=tiger@acme.example \\\n  --docker-username=tiger \\\n  --docker-password=pass1234 \\\n  --docker-server=my-registry.example:5000 \\\n  -n given-namespace\n</pre> <p>With the secret defined, you can reference them from your CalrissianContext as presented below.</p> <pre>#Creating a CalrissianContext using the this secret\nsession = CalrissianContext(\n            namespace=namespace_name,\n            storage_class=\"openebs-kernel-nfs-scw\",\n            volume_size=\"10G\",\n            image_pull_secrets={\n                \"imagePullSecrets\": secret_config,\n                \"additionalImagePullSecrets\": [\n                    {\"name\": \"my-secret\"},\n                    {\"name\": \"my-other-secret\"}\n                ]\n            },\n)\n</pre> <p>This is useful if you have multiple secrets that you want to use to pull images from different registries.</p> <p>The <code>additionalImagePullSecrets</code> key is optional and can be omitted if you only want to use the imagePullSecret.</p>"},{"location":"gettingstarted/#creating-a-calrissiancontext-from-an-existing-namespace","title":"Creating a CalrissianContext from an Existing Namespace\u00b6","text":"<p>It is possible to create a <code>CalrissianContext</code> using an already existing Kubernetes namespace.</p> <p>This is useful when the namespace has already been provisioned with the necessary service account, roles, and role bindings.</p> <p>You can also specify which service account to use. If no service account is provided, it will default to using the \" default \" service account within the specified namespace.</p> <p>To use this functionality, you should use the alternate constructor:</p> <pre>CalrissianContext.from_existing_namespace(...)\n</pre> <p>Example:</p> <pre>from context import CalrissianContext\n\nsession = CalrissianContext.from_existing_namespace(\n    namespace=\"my-existing-namespace\",\n    storage_class=\"openebs-kernel-nfs-scw\",\n    volume_size=\"10G\",\n    service_account=\"example-service-account\"  # Optional; defaults to \"default\" if not specified\n)\n</pre> <p>This method returns an instance of <code>CalrissianContext</code> initialized with the provided namespace and configuration.</p>"},{"location":"gettingstarted/#read-the-cwl-document","title":"Read the CWL document\u00b6","text":"<p>Now load a CWL document and create a dictionary with the parameters:</p>"},{"location":"gettingstarted/#create-the-calrissianjob","title":"Create the <code>CalrissianJob</code>\u00b6","text":""},{"location":"gettingstarted/#create-the-calrissianexecution","title":"Create the <code>CalrissianExecution</code>\u00b6","text":""},{"location":"installation/","title":"Installation","text":"<p>pycalrissian is a conda package available under Terradue conda channel.</p> <p>To install pycalrissian, use <code>conda</code> (slower) or <code>mamba</code> (faster).</p> <p>On a terminal, run:</p> <pre><code>mamba install -c terradue pycalrissian\n</code></pre> <p>From your Python script/notebook, you can now import pycalrissian and use its modules.</p> <p>Development version</p> <p>Install the development version with:</p> <pre><code>mamba install -c terradue/label/dev pycalrissian\n</code></pre>"},{"location":"api/pycalrissian/","title":"Module pycalrissian","text":""},{"location":"api/pycalrissian/#sub-modules","title":"Sub-modules","text":"<ul> <li>pycalrissian.context</li> <li>pycalrissian.execution</li> <li>pycalrissian.job</li> <li>pycalrissian.utils</li> </ul>"},{"location":"api/pycalrissian/context/","title":"Module pycalrissian.context","text":""},{"location":"api/pycalrissian/context/#classes","title":"Classes","text":""},{"location":"api/pycalrissian/context/#calrissiancontext","title":"CalrissianContext","text":"<pre><code>class CalrissianContext(\n    namespace: str,\n    storage_class: str,\n    volume_size: str,\n    resource_quota: Dict = None,\n    image_pull_secrets: Dict = None,\n    kubeconfig_file: &lt;class 'TextIO'&gt; = None,\n    labels: Dict = None,\n    annotations: Dict = None\n)\n</code></pre> <p>Creates a kubernetes namespace to run calrissian jobs</p>"},{"location":"api/pycalrissian/context/#static-methods","title":"Static methods","text":""},{"location":"api/pycalrissian/context/#from_existing_namespace","title":"from_existing_namespace","text":"<pre><code>def from_existing_namespace(\n    namespace: str,\n    storage_class: str,\n    volume_size: str,\n    service_account: Union[str, NoneType] = None,\n    resource_quota: Union[Dict, NoneType] = None,\n    image_pull_secrets: Union[Dict, NoneType] = None,\n    kubeconfig_file: Union[TextIO, NoneType] = None,\n    labels: Union[Dict, NoneType] = None,\n    annotations: Union[Dict, NoneType] = None\n) -&gt; 'CalrissianContext'\n</code></pre> <p>Creates a CalrissianContext for an existing Kubernetes namespace.</p> <p>Parameters:</p> Name Type Description Default namespace str Name of the existing Kubernetes namespace (with the requiredservice account, roles, and role bindings already set up). None storage_class str Name of the storage class for the RWX persistent volume claim. None volume_size str Size of the RWX volume (e.g., \"10G\"). None resource_quota Optional[Dict] Optional resource quota for the namespace. None image_pull_secrets Optional[Dict] Dictionary containing image pull secrets. None kubeconfig_file Optional[TextIO] File object pointing to the kubeconfig. None labels Optional[Dict] Optional labels to apply to namespace resources. None annotations Optional[Dict] Optional annotations to apply to namespace resources. None <p>Returns:</p> Type Description CalrissianContext An instance configured to use an existing namespace."},{"location":"api/pycalrissian/context/#retry","title":"retry","text":"<pre><code>def retry(\n    fun,\n    max_tries=10,\n    interval=5,\n    **kwargs\n)\n</code></pre>"},{"location":"api/pycalrissian/context/#methods","title":"Methods","text":""},{"location":"api/pycalrissian/context/#create_additional_image_pull_secret","title":"create_additional_image_pull_secret","text":"<pre><code>def create_additional_image_pull_secret(\n    self,\n    secrets_list\n)\n</code></pre>"},{"location":"api/pycalrissian/context/#create_configmap","title":"create_configmap","text":"<pre><code>def create_configmap(\n    self,\n    name,\n    key,\n    content,\n    annotations: Dict = {},\n    labels: Dict = {}\n)\n</code></pre>"},{"location":"api/pycalrissian/context/#create_image_pull_secret","title":"create_image_pull_secret","text":"<pre><code>def create_image_pull_secret(\n    self,\n    name\n)\n</code></pre>"},{"location":"api/pycalrissian/context/#create_namespace","title":"create_namespace","text":"<pre><code>def create_namespace(\n    self,\n    labels: dict = None,\n    annotations: dict = None\n) -&gt; kubernetes.client.models.v1_namespace.V1Namespace\n</code></pre>"},{"location":"api/pycalrissian/context/#create_pvc","title":"create_pvc","text":"<pre><code>def create_pvc(\n    self,\n    name,\n    access_modes,\n    size,\n    storage_class\n)\n</code></pre>"},{"location":"api/pycalrissian/context/#create_resource_quota","title":"create_resource_quota","text":"<pre><code>def create_resource_quota(\n    self,\n    name\n)\n</code></pre>"},{"location":"api/pycalrissian/context/#create_role","title":"create_role","text":"<pre><code>def create_role(\n    self,\n    name: str,\n    verbs: list,\n    resources: list = ['pods', 'pods/log'],\n    api_groups: list = ['*']\n)\n</code></pre>"},{"location":"api/pycalrissian/context/#create_role_binding","title":"create_role_binding","text":"<pre><code>def create_role_binding(\n    self,\n    name: str,\n    role: str\n)\n</code></pre>"},{"location":"api/pycalrissian/context/#delete_pod","title":"delete_pod","text":"<pre><code>def delete_pod(\n    self,\n    name\n)\n</code></pre>"},{"location":"api/pycalrissian/context/#dispose","title":"dispose","text":"<pre><code>def dispose(\n    self\n)\n</code></pre>"},{"location":"api/pycalrissian/context/#initialise","title":"initialise","text":"<pre><code>def initialise(\n    self\n)\n</code></pre> <p>Create the kubernetes resources to run a Calrissian job</p> <p>Arg:     None</p> <p>Returns:</p> Type Description None None"},{"location":"api/pycalrissian/context/#is_config_map_created","title":"is_config_map_created","text":"<pre><code>def is_config_map_created(\n    self,\n    **kwargs\n)\n</code></pre>"},{"location":"api/pycalrissian/context/#is_image_pull_secret_created","title":"is_image_pull_secret_created","text":"<pre><code>def is_image_pull_secret_created(\n    self,\n    **kwargs\n)\n</code></pre>"},{"location":"api/pycalrissian/context/#is_namespace_created","title":"is_namespace_created","text":"<pre><code>def is_namespace_created(\n    self,\n    **kwargs\n)\n</code></pre>"},{"location":"api/pycalrissian/context/#is_namespace_deleted","title":"is_namespace_deleted","text":"<pre><code>def is_namespace_deleted(\n    self,\n    **kwargs\n)\n</code></pre> <p>Helper function for retry in dispose</p>"},{"location":"api/pycalrissian/context/#is_object_created","title":"is_object_created","text":"<pre><code>def is_object_created(\n    self,\n    read_method,\n    **kwargs\n)\n</code></pre>"},{"location":"api/pycalrissian/context/#is_pvc_created","title":"is_pvc_created","text":"<pre><code>def is_pvc_created(\n    self,\n    **kwargs\n)\n</code></pre>"},{"location":"api/pycalrissian/context/#is_resource_quota_created","title":"is_resource_quota_created","text":"<pre><code>def is_resource_quota_created(\n    self,\n    **kwargs\n)\n</code></pre>"},{"location":"api/pycalrissian/context/#is_role_binding_created","title":"is_role_binding_created","text":"<pre><code>def is_role_binding_created(\n    self,\n    **kwargs\n)\n</code></pre>"},{"location":"api/pycalrissian/context/#is_role_created","title":"is_role_created","text":"<pre><code>def is_role_created(\n    self,\n    **kwargs\n)\n</code></pre>"},{"location":"api/pycalrissian/context/#patch_service_account","title":"patch_service_account","text":"<pre><code>def patch_service_account(\n    self\n)\n</code></pre>"},{"location":"api/pycalrissian/execution/","title":"Module pycalrissian.execution","text":""},{"location":"api/pycalrissian/execution/#classes","title":"Classes","text":""},{"location":"api/pycalrissian/execution/#calrissianexecution","title":"CalrissianExecution","text":"<pre><code>class CalrissianExecution(\n    job: pycalrissian.job.CalrissianJob,\n    runtime_context: pycalrissian.context.CalrissianContext\n)\n</code></pre>"},{"location":"api/pycalrissian/execution/#methods","title":"Methods","text":""},{"location":"api/pycalrissian/execution/#get_completion_time","title":"get_completion_time","text":"<pre><code>def get_completion_time(\n    self\n)\n</code></pre> <p>Returns either the completion time or the last transition time</p>"},{"location":"api/pycalrissian/execution/#get_file_from_volume","title":"get_file_from_volume","text":"<pre><code>def get_file_from_volume(\n    self,\n    filenames\n)\n</code></pre>"},{"location":"api/pycalrissian/execution/#get_log","title":"get_log","text":"<pre><code>def get_log(\n    self\n)\n</code></pre> <p>Returns the job execution log</p>"},{"location":"api/pycalrissian/execution/#get_output","title":"get_output","text":"<pre><code>def get_output(\n    self\n) -&gt; Dict\n</code></pre> <p>Returns the job output</p>"},{"location":"api/pycalrissian/execution/#get_start_time","title":"get_start_time","text":"<pre><code>def get_start_time(\n    self\n)\n</code></pre> <p>Returns the start time</p>"},{"location":"api/pycalrissian/execution/#get_status","title":"get_status","text":"<pre><code>def get_status(\n    self\n)\n</code></pre> <p>Returns the job status</p>"},{"location":"api/pycalrissian/execution/#get_tool_logs","title":"get_tool_logs","text":"<pre><code>def get_tool_logs(\n    self\n)\n</code></pre> <p>stages the tool logs from k8s volume</p>"},{"location":"api/pycalrissian/execution/#get_usage_report","title":"get_usage_report","text":"<pre><code>def get_usage_report(\n    self\n) -&gt; Dict\n</code></pre> <p>Returns the job usage report</p>"},{"location":"api/pycalrissian/execution/#get_waiting_pods","title":"get_waiting_pods","text":"<pre><code>def get_waiting_pods(\n    self\n) -&gt; List[kubernetes.client.models.v1_pod.V1Pod]\n</code></pre>"},{"location":"api/pycalrissian/execution/#is_active","title":"is_active","text":"<pre><code>def is_active(\n    self\n) -&gt; bool\n</code></pre> <p>Returns True if the job execution is on-going</p>"},{"location":"api/pycalrissian/execution/#is_complete","title":"is_complete","text":"<pre><code>def is_complete(\n    self\n) -&gt; bool\n</code></pre> <p>Returns True if the job execution is completed (success or failed)</p>"},{"location":"api/pycalrissian/execution/#is_succeeded","title":"is_succeeded","text":"<pre><code>def is_succeeded(\n    self\n) -&gt; bool\n</code></pre> <p>Returns True if the job execution is completed and succeeded</p>"},{"location":"api/pycalrissian/execution/#monitor","title":"monitor","text":"<pre><code>def monitor(\n    self,\n    interval: int = 5,\n    grace_period=120,\n    wall_time: Union[int, NoneType] = None\n) -&gt; None\n</code></pre>"},{"location":"api/pycalrissian/execution/#submit","title":"submit","text":"<pre><code>def submit(\n    self\n)\n</code></pre> <p>Submits the job to the cluster</p>"},{"location":"api/pycalrissian/execution/#jobstatus","title":"JobStatus","text":"<pre><code>class JobStatus(\n    /,\n    *args,\n    **kwargs\n)\n</code></pre> <p>An enumeration.</p>"},{"location":"api/pycalrissian/execution/#ancestors-in-mro","title":"Ancestors (in MRO)","text":"<ul> <li>enum.Enum</li> </ul>"},{"location":"api/pycalrissian/execution/#class-variables","title":"Class variables","text":"<pre><code>ACTIVE\n</code></pre> <pre><code>FAILED\n</code></pre> <pre><code>KILLED\n</code></pre> <pre><code>SUCCEEDED\n</code></pre> <pre><code>name\n</code></pre> <pre><code>value\n</code></pre>"},{"location":"api/pycalrissian/job/","title":"Module pycalrissian.job","text":""},{"location":"api/pycalrissian/job/#classes","title":"Classes","text":""},{"location":"api/pycalrissian/job/#calrissianjob","title":"CalrissianJob","text":"<pre><code>class CalrissianJob(\n    cwl: Dict,\n    params: Dict,\n    runtime_context: pycalrissian.context.CalrissianContext,\n    cwl_entry_point: str = None,\n    pod_env_vars: Dict = None,\n    pod_node_selector: Dict = None,\n    max_ram: str = '8G',\n    max_cores: str = '16',\n    security_context: Dict = None,\n    service_account: str = None,\n    storage_class: str = None,\n    debug: bool = False,\n    no_read_only: bool = False,\n    keep_pods: bool = False,\n    backoff_limit: int = 2,\n    tool_logs: bool = False,\n    ttl_seconds_after_finished: int = None\n)\n</code></pre>"},{"location":"api/pycalrissian/job/#static-methods","title":"Static methods","text":""},{"location":"api/pycalrissian/job/#create_container","title":"create_container","text":"<pre><code>def create_container(\n    image,\n    name,\n    args,\n    command,\n    volume_mounts,\n    env,\n    pull_policy='Always'\n)\n</code></pre>"},{"location":"api/pycalrissian/job/#create_job","title":"create_job","text":"<pre><code>def create_job(\n    name,\n    pod_template,\n    namespace,\n    backoff_limit=4,\n    ttl_seconds_after_finished=None\n)\n</code></pre>"},{"location":"api/pycalrissian/job/#create_pod_template","title":"create_pod_template","text":"<pre><code>def create_pod_template(\n    name,\n    containers,\n    volumes,\n    security_context,\n    node_selector=None,\n    service_account=None\n)\n</code></pre> <p>Creates the pod template with the three containers</p>"},{"location":"api/pycalrissian/job/#shorten_namespace","title":"shorten_namespace","text":"<pre><code>def shorten_namespace(\n    value: str\n) -&gt; str\n</code></pre>"},{"location":"api/pycalrissian/job/#methods","title":"Methods","text":""},{"location":"api/pycalrissian/job/#to_dict","title":"to_dict","text":"<pre><code>def to_dict(\n    self\n)\n</code></pre> <p>Serialize to a dictionary</p>"},{"location":"api/pycalrissian/job/#to_k8s_job","title":"to_k8s_job","text":"<pre><code>def to_k8s_job(\n    self\n)\n</code></pre> <p>Cast to kubernetes Job</p>"},{"location":"api/pycalrissian/job/#to_yaml","title":"to_yaml","text":"<pre><code>def to_yaml(\n    self,\n    file_path\n)\n</code></pre> <p>Serialize to YAML file</p>"},{"location":"api/pycalrissian/job/#containernames","title":"ContainerNames","text":"<pre><code>class ContainerNames(\n    /,\n    *args,\n    **kwargs\n)\n</code></pre> <p>An enumeration.</p>"},{"location":"api/pycalrissian/job/#ancestors-in-mro","title":"Ancestors (in MRO)","text":"<ul> <li>enum.Enum</li> </ul>"},{"location":"api/pycalrissian/job/#class-variables","title":"Class variables","text":"<pre><code>CALRISSIAN\n</code></pre> <pre><code>name\n</code></pre> <pre><code>value\n</code></pre>"},{"location":"api/pycalrissian/utils/","title":"Module pycalrissian.utils","text":"<p>The functions currently only support the copying of file</p> <p>from pod and into the pod. Support for copying the entire directory is yet to be added</p>"},{"location":"api/pycalrissian/utils/#variables","title":"Variables","text":"<pre><code>stream\n</code></pre>"},{"location":"api/pycalrissian/utils/#functions","title":"Functions","text":""},{"location":"api/pycalrissian/utils/#copy_from_volume","title":"copy_from_volume","text":"<pre><code>def copy_from_volume(\n    context: pycalrissian.context.CalrissianContext,\n    volume: Dict,\n    volume_mount: Dict,\n    source_paths: list,\n    destination_path: str\n)\n</code></pre>"},{"location":"api/pycalrissian/utils/#copy_to_volume","title":"copy_to_volume","text":"<pre><code>def copy_to_volume(\n    context: pycalrissian.context.CalrissianContext,\n    volume: Dict,\n    volume_mount: Dict,\n    source_paths: list,\n    destination_path: str\n)\n</code></pre>"},{"location":"api/pycalrissian/utils/#classes","title":"Classes","text":""},{"location":"api/pycalrissian/utils/#helperpod","title":"HelperPod","text":"<pre><code>class HelperPod(\n    context: pycalrissian.context.CalrissianContext,\n    volume: Dict,\n    volume_mount: Dict\n)\n</code></pre>"},{"location":"api/pycalrissian/utils/#methods","title":"Methods","text":""},{"location":"api/pycalrissian/utils/#copy_from_volume_1","title":"copy_from_volume","text":"<pre><code>def copy_from_volume(\n    self,\n    src_path,\n    dest_path\n)\n</code></pre> <p>Copy files from a Kubernetes pod's volume to a local destination.</p> <p>Parameters:</p> Name Type Description Default src_path None The path of the file or directory to be copied from the pod's volume. None dest_path None The local destination path where the file or directory should be copied to. None"},{"location":"api/pycalrissian/utils/#copy_from_volume_using_kubectl","title":"copy_from_volume_using_kubectl","text":"<pre><code>def copy_from_volume_using_kubectl(\n    self,\n    src_path,\n    dest_path,\n    max_attempts=5,\n    retry_interval=5\n)\n</code></pre> <p>Copy a file from a Kubernetes pod using <code>kubectl cp</code> command.</p> <p>Parameters:</p> Name Type Description Default src_path None The source path of the file inside the pod where the volume is mounted. None dest_path None The destination path on the local filesystem where the fileshould be copied. None max_attempts None The maximum number of copy attempts in case of failure (default is 5). None retry_interval None The time interval (in seconds) to wait before retrying a copyoperation (default is 5 seconds). None"},{"location":"api/pycalrissian/utils/#copy_to_volume_1","title":"copy_to_volume","text":"<pre><code>def copy_to_volume(\n    self,\n    src_path,\n    dest_path\n)\n</code></pre> <p>This function copies a file inside the pod</p> <p>Parameters:</p> Name Type Description Default api_instance None coreV1Api() None name None pod name None ns None pod namespace None source_file None Path of the file to be copied into pod None <p>Returns:</p> Type Description None nothing"},{"location":"api/pycalrissian/utils/#copy_to_volume_using_kubectl","title":"copy_to_volume_using_kubectl","text":"<pre><code>def copy_to_volume_using_kubectl(\n    self,\n    src_path,\n    dest_path,\n    max_attempts=5,\n    retry_interval=5\n)\n</code></pre> <p>Copy a file from a Kubernetes pod using <code>kubectl cp</code> command.</p> <p>Parameters:</p> Name Type Description Default src_path None The source path of the file inside the pod where the volume is mounted. None dest_path None The destination path on the local filesystem where the fileshould be copied. None max_attempts None The maximum number of copy attempts in case of failure (default is 5). None retry_interval None The time interval (in seconds) to wait before retrying a copyoperation (default is 5 seconds). None"},{"location":"api/pycalrissian/utils/#dismiss","title":"dismiss","text":"<pre><code>def dismiss(\n    self\n)\n</code></pre>"}]}